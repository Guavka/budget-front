import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/.pnpm/@quasar+fastclick@1.1.5/node_modules/@quasar/fastclick/fastclick.js
var require_fastclick = __commonJS({
  "node_modules/.pnpm/@quasar+fastclick@1.1.5/node_modules/@quasar/fastclick/fastclick.js"() {
    (function() {
      "use strict";
      function FastClick(layer) {
        var oldOnClick;
        this.trackingClick = false;
        this.trackingClickStart = 0;
        this.targetElement = null;
        this.touchStartX = 0;
        this.touchStartY = 0;
        this.lastTouchIdentifier = 0;
        this.touchBoundary = 10;
        this.tapDelay = 200;
        this.tapTimeout = 700;
        function bind(method, context2) {
          return function() {
            return method.apply(context2, arguments);
          };
        }
        var methods = ["onMouse", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "onTouchCancel"];
        var context = this;
        for (var i = 0, l = methods.length; i < l; i++) {
          context[methods[i]] = bind(context[methods[i]], context);
        }
        layer.addEventListener("click", this.onClick, true);
        layer.addEventListener("touchstart", this.onTouchStart, false);
        layer.addEventListener("touchmove", this.onTouchMove, false);
        layer.addEventListener("touchend", this.onTouchEnd, false);
        layer.addEventListener("touchcancel", this.onTouchCancel, false);
        if (!Event.prototype.stopImmediatePropagation) {
          layer.removeEventListener = function(type, callback, capture) {
            var rmv = Node.prototype.removeEventListener;
            if (type === "click") {
              rmv.call(layer, type, callback.hijacked || callback, capture);
            } else {
              rmv.call(layer, type, callback, capture);
            }
          };
          layer.addEventListener = function(type, callback, capture) {
            var adv = Node.prototype.addEventListener;
            if (type === "click") {
              adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
                if (!event.propagationStopped) {
                  callback(event);
                }
              }), capture);
            } else {
              adv.call(layer, type, callback, capture);
            }
          };
        }
        if (typeof layer.onclick === "function") {
          oldOnClick = layer.onclick;
          layer.addEventListener("click", function(event) {
            oldOnClick(event);
          }, false);
          layer.onclick = null;
        }
      }
      var inputTypes = ["email", "number", "password", "search", "tel", "text", "url"];
      FastClick.prototype.isInput = function(targetElement) {
        return targetElement.tagName.toLowerCase() === "textarea" || inputTypes.indexOf(targetElement.type) !== -1;
      };
      FastClick.prototype.needsClick = function(target) {
        switch (target.nodeName.toLowerCase()) {
          case "button":
          case "select":
          case "textarea":
            if (target.disabled) {
              return true;
            }
            break;
          case "input":
            if (target.type === "file" || target.disabled) {
              return true;
            }
            break;
          case "label":
          case "iframe":
          case "video":
            return true;
        }
        return /\bneedsclick\b/.test(target.className);
      };
      FastClick.prototype.needsFocus = function(target) {
        switch (target.nodeName.toLowerCase()) {
          case "textarea":
            return true;
          case "select":
            return true;
          case "input":
            switch (target.type) {
              case "button":
              case "checkbox":
              case "file":
              case "image":
              case "radio":
              case "submit":
                return false;
            }
            return !target.disabled && !target.readOnly;
          default:
            return /\bneedsfocus\b/.test(target.className);
        }
      };
      FastClick.prototype.sendClick = function(targetElement, event) {
        var clickEvent, touch;
        if (document.activeElement && document.activeElement !== targetElement) {
          document.activeElement.blur();
        }
        touch = event.changedTouches[0];
        clickEvent = document.createEvent("MouseEvents");
        clickEvent.initMouseEvent("click", true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
        clickEvent.forwardedTouchEvent = true;
        targetElement.dispatchEvent(clickEvent);
      };
      FastClick.prototype.focus = function(targetElement) {
        var length;
        targetElement.focus();
        if (targetElement.setSelectionRange && targetElement.type.indexOf("date") !== 0 && targetElement.type !== "time" && targetElement.type !== "month" && targetElement.type !== "email" && targetElement.type !== "number") {
          length = targetElement.value.length;
          targetElement.setSelectionRange(length, length);
        }
      };
      FastClick.prototype.updateScrollParent = function(targetElement) {
        var scrollParent, parentElement;
        scrollParent = targetElement.fastClickScrollParent;
        if (!scrollParent || !scrollParent.contains(targetElement)) {
          parentElement = targetElement;
          do {
            if (parentElement.scrollHeight > parentElement.offsetHeight) {
              scrollParent = parentElement;
              targetElement.fastClickScrollParent = parentElement;
              break;
            }
            parentElement = parentElement.parentElement;
          } while (parentElement);
        }
        if (scrollParent) {
          scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
        }
      };
      FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {
        if (eventTarget.nodeType === Node.TEXT_NODE) {
          return eventTarget.parentNode;
        }
        return eventTarget;
      };
      FastClick.prototype.onTouchStart = function(event) {
        var targetElement, touch;
        if (event.targetTouches.length > 1) {
          return true;
        }
        targetElement = this.getTargetElementFromEventTarget(event.target);
        touch = event.targetTouches[0];
        if (targetElement.isContentEditable) {
          return true;
        }
        if (targetElement === document.activeElement && this.isInput(targetElement)) {
          return true;
        }
        if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
          event.preventDefault();
          return false;
        }
        this.lastTouchIdentifier = touch.identifier;
        this.updateScrollParent(targetElement);
        this.trackingClick = true;
        this.trackingClickStart = event.timeStamp;
        this.targetElement = targetElement;
        this.touchStartX = touch.pageX;
        this.touchStartY = touch.pageY;
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
          event.preventDefault();
        }
        return true;
      };
      FastClick.prototype.touchHasMoved = function(event) {
        var touch = event.changedTouches[0], boundary = this.touchBoundary;
        if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
          return true;
        }
        return false;
      };
      FastClick.prototype.onTouchMove = function(event) {
        if (!this.trackingClick) {
          return true;
        }
        if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
          this.trackingClick = false;
          this.targetElement = null;
        }
        return true;
      };
      FastClick.prototype.findControl = function(labelElement) {
        if (labelElement.control !== void 0) {
          return labelElement.control;
        }
        if (labelElement.htmlFor) {
          return document.getElementById(labelElement.htmlFor);
        }
        return labelElement.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea");
      };
      FastClick.prototype.onTouchEnd = function(event) {
        var forElement, trackingClickStart, targetTagName, scrollParent, targetElement = this.targetElement;
        if (!this.trackingClick) {
          return true;
        }
        if (event.timeStamp - this.lastClickTime < this.tapDelay) {
          this.cancelNextClick = true;
          return true;
        }
        if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
          return true;
        }
        this.cancelNextClick = false;
        this.lastClickTime = event.timeStamp;
        trackingClickStart = this.trackingClickStart;
        this.trackingClick = false;
        this.trackingClickStart = 0;
        targetTagName = targetElement.tagName.toLowerCase();
        if (targetTagName === "label") {
          forElement = this.findControl(targetElement);
          if (forElement) {
            this.focus(targetElement);
            targetElement = forElement;
          }
        } else if (this.needsFocus(targetElement)) {
          if (event.timeStamp - trackingClickStart > 100 || window.top !== window && targetTagName === "input") {
            this.targetElement = null;
            return false;
          }
          this.focus(targetElement);
          this.sendClick(targetElement, event);
          if (targetTagName !== "select") {
            this.targetElement = null;
            event.preventDefault();
          }
          return false;
        }
        scrollParent = targetElement.fastClickScrollParent;
        if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
          return true;
        }
        if (!this.needsClick(targetElement)) {
          event.preventDefault();
          this.sendClick(targetElement, event);
        }
        return false;
      };
      FastClick.prototype.onTouchCancel = function() {
        this.trackingClick = false;
        this.targetElement = null;
      };
      FastClick.prototype.onMouse = function(event) {
        if (!this.targetElement) {
          return true;
        }
        if (event.forwardedTouchEvent) {
          return true;
        }
        if (!event.cancelable) {
          return true;
        }
        if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
          if (event.stopImmediatePropagation) {
            event.stopImmediatePropagation();
          } else {
            event.propagationStopped = true;
          }
          event.stopPropagation();
          event.preventDefault();
          return false;
        }
        return true;
      };
      FastClick.prototype.onClick = function(event) {
        var permitted;
        if (this.trackingClick) {
          this.targetElement = null;
          this.trackingClick = false;
          return true;
        }
        if (event.target.type === "submit" && event.detail === 0) {
          return true;
        }
        permitted = this.onMouse(event);
        if (!permitted) {
          this.targetElement = null;
        }
        return permitted;
      };
      function init() {
        new FastClick(document.body);
      }
      if (document.readyState !== "loading") {
        return init();
      }
      document.addEventListener("DOMContentLoaded", init, false);
    })();
  }
});

// dep:@quasar_fastclick
var quasar_fastclick_default = require_fastclick();
export {
  quasar_fastclick_default as default
};
/**
 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
 *
 * @codingstandard ftlabs-jsv2
 * @copyright The Financial Times Limited [All Rights Reserved]
 * @license MIT License (see LICENSE.txt)
 */
//# sourceMappingURL=@quasar_fastclick.js.map
